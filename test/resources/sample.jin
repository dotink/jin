--extends = test/resources/base.jin
--without = [
	"complex.arrayValue"
]

simpleValue    = value
quotedValue    = "value"
intValue       = 1
floatValue     = 1.03
hexValue       = 0xD
binValue       = 0b1101
octValue       = 015
boolValue      = true
upBoolValue    = TRUE
nullValue      = null
upNullValue    = NULL
envValue       = env(VALUE, FALSE)
runValue       = run(md5('value'))
comValue       = This value is commented ; So this should not be seen
comQuotedValue = "This value is quoted ; with a "" so should be seen"
multiValue     = This is multiple lines of text.  Line endings should be
preserved until `foo=bar` or `[section]` or `\n\n`.
qmultiValue    = "
	Hopefully this works as well ; and you can see this
"

[complex]

	;
	; More complex JSON-like values
	;

	arrayValue   = ["value1", "value2",]
	objectValue  = {"value": "valuewithsmi;",}
	complexValue = {
		;
		; Comment
		;

		"arrayValue": [
			"value1", ; Inline Comment
			"value2",
		],
	}

	;
	; Run with context
	;

	run = run($foo)

	;
	;
	;

	envWithDefault    = env(FOO, bar)
	envWithoutDefault = env(BAR)
	envSetWithDefault = env(FOOBAR, garbage)

	;
	;
	;

	customFunction = hello(Matt)

	;
	; Templates
	;

	template = def(value1, value2)
	{
		{
			"value1": $value1,
			"value2": $value2
		}
	}

	include = inc(complex.template)
	{
		1

		;
		; Comment
		;

		2 ; Inline Comment
	}

	mapping = map(complex.template) {
		1	2

		;
		; Comment
		;

		3	env(VALUE) ; Inline Comment
	}

[reference]

	;
	; ....
	;

	[&.sub1]

		simpleValue = value

		[&&.sub1]

			simpleValue = value

	[&.sub2]

		simpleValue = value

[dash-section] ; does this work?

	simpleValue  = value
	quotedValue  = "value"
	intValue     = 1
	floatValue   = 1.03
	boolValue    = true
	upBoolValue  = TRUE
	nullValue    = null
	upNullValue  = null
	envValue     = env(VALUE, FALSE)
	runValue     = run(md5('value'))
	comValue     = This value is commented ; So this should not be seen
	multiValue   = This is multiple lines of text.  Line endings should be
	preserved until `foo=bar` or `[section]` or `\n\n`.

	[&.complex]

		;
		; More complex JSON-like values
		;

		arrayValue   = ["value1", "value2"]
		objectValue  = {"value": "value"}
		complexValue = {
			;
			; Comment
			;

			"arrayValue": [
				"value1", ; Inline Comment
				"value2"
			],

			"nestedObjectValue": {
				"normal": 1,
				"breaking":
					"Multi
						Line
					Text"
			}
		}

		;
		; Run with context
		;

		run = run($foo)

		;
		;
		;

		envWithDefault    = env(FOO, bar)
		envWithoutDefault = env(BAR)
		envSetWithDefault = env(FOOBAR, garbage)

		;
		;
		;

		customFunction = hello(Matt)

		;
		; Templates
		;

		template = def(value1, value2) {
			{
				"value1": $value1,
				"value2": $value2
			}
		}

		include = inc(complex.template) {
			1

			;
			; Comment
			;

			2 ; Inline Comment
		}

		mapping = map(complex.template) {
			1	2

			;
			; Comment
			;

			3	env(VALUE) ; Inline Comment
		}
